generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
    std_id        Int      @id @default(autoincrement())
    firstName     String
    middleName    String?
    lastName      String
    date_of_birth DateTime 
    roll_no       Int
    cgpa          Float
    class         Int 
    fees          Fees[]
    marks         Marks[]
    libraryBooks  LibraryStd[]
    attendance    Attendance[] 
}

model Teacher {
    emp_id        Int     @id @default(autoincrement())
    firstName     String
    middleName    String?
    lastName      String
    date_of_birth DateTime
    dept          String
    paid_leaves   Int     @default(20)
    subject       Subject[]
    marks         Marks[]
    libraryBooks  LibraryTeach[]
    classesTaken  Attendance[]
}

model Fees {
    fees_reference_id   Int   @id @default(autoincrement())
    std_id              Int
    amount              Int
    paid_on             DateTime @default(now())
    installment_no      Int
    Student             Student @relation(fields: [std_id], references: [std_id])
}

model Subject {
    sub_id        Int       @id @default(autoincrement())
    sub_name      String
    emp_id        Int
    class         Int
    teacher       Teacher   @relation(fields: [emp_id], references: [emp_id])
    attendance    Attendance[]
}

model Attendance {
    id            Int       @id @default(autoincrement())
    sub_id        Int
    std_id        Int
    emp_id        Int
    date          DateTime
    present       Boolean
    subject       Subject   @relation(fields: [sub_id], references: [sub_id])
    student       Student   @relation(fields: [std_id], references: [std_id])
    teacher       Teacher   @relation(fields: [emp_id], references: [emp_id])
}

model Marks {
    id            Int       @id @default(autoincrement())
    std_id        Int 
    emp_id        Int
    subject       String
    teacher       Teacher   @relation(fields: [emp_id], references: [emp_id])
    student       Student   @relation(fields: [std_id], references: [std_id])
}

model LibraryStd {
    id           Int            @id @default(autoincrement())
    bookNo       Int            @unique
    std_id       Int
    takenOn      DateTime       @default(now())
    dueDate      DateTime
    student      Student        @relation(fields: [std_id], references: [std_id])
    bookDetail   LibraryBooks   @relation(fields: [bookNo], references: [bookNo])
}

model LibraryTeach {
    id           Int            @id @default(autoincrement())
    bookNo       Int            @unique
    emp_id       Int
    takenOn      DateTime       @default(now())
    dueDate      DateTime
    teacher      Teacher        @relation(fields: [emp_id], references: [emp_id])
    bookDetail   LibraryBooks   @relation(fields: [bookNo], references: [bookNo])
}

model LibraryBooks {
    id           Int          @id @default(autoincrement())
    bookNo       Int          @unique
    bookName     String
    createdOn    DateTime     @default(now())
    teacherLib   LibraryTeach[]
    studentLib   LibraryStd[]
}
